diff --git a/js/particles.js b/js/particles.js
index 7847895601108e92a16295c31b265bc8d1c81a6e..7e536af0fdc9f15e2d621640be28f292e963fe6c 100644
--- a/js/particles.js
+++ b/js/particles.js
@@ -72,54 +72,57 @@ class Quadtree {
         let w = this.boundary.w / 2;
         let h = this.boundary.h / 2;
         let ne = new Rectangle(x + w, y - h, w, h);
         this.northeast = new Quadtree(ne, this.capacity);
         let nw = new Rectangle(x - w, y - h, w, h);
         this.northwest = new Quadtree(nw, this.capacity);
         let se = new Rectangle(x + w, y + h, w, h);
         this.southeast = new Quadtree(se, this.capacity);
         let sw = new Rectangle(x - w, y + h, w, h);
         this.southwest = new Quadtree(sw, this.capacity);
         this.divided = true;
     }
 
     insert(point) {
         if (!this.boundary.contains(point)) {
             return false;
         }
 
         if (this.points.length < this.capacity) {
             this.points.push(point);
             return true;
         } else {
             if (!this.divided) {
                 this.subdivide();
             }
-            this.northeast.insert(point);
-            this.northwest.insert(point);
-            this.southeast.insert(point);
-            this.southwest.insert(point);
+
+            if (this.northeast.insert(point)) return true;
+            if (this.northwest.insert(point)) return true;
+            if (this.southeast.insert(point)) return true;
+            if (this.southwest.insert(point)) return true;
+
+            return false;
         }
     }
 
     query(range, found) {
         if (!found) {
             found = [];
         }
         if (!this.boundary.intersects(range)) {
             return found;
         } else {
             for (let p of this.points) {
                 if (range.contains(p)) {
                     found.push(p.data);
                 }
             }
             if (this.divided) {
                 this.northwest.query(range, found);
                 this.northeast.query(range, found);
                 this.southwest.query(range, found);
                 this.southeast.query(range, found);
             }
         }
         return found;
     }
 }
